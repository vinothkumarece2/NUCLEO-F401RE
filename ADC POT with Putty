#include <stdint.h>
#include <stm32f4xx.h>
#include <string.h>
#include <stdio.h>
void delay(void)
{
    for (volatile uint32_t i = 0; i < 70000; i++);
}

void USART_init(void)
{
    // Enable GPIOA clock
    RCC->AHB1ENR|= (1 << 0);

     // Set & reset PA2 tx
    GPIOA->MODER&= ~(0xA0);  // Reset PA2
    GPIOA->MODER|= (0xA0);  // set PA2 & PA3 tx & rx
    // Set PA2 alternate function to AF7 (USART2_TX)
    GPIOA->AFR[0]&= ~(0x700);  //Reset PA2
    GPIOA->AFR[0]|= (0x700);   //set pa1
    // Enable USART2 clock
    RCC->APB1ENR|= (1 << 17);

    // Configure USART2 baud rate to 9600 for 16 MHz clock
    USART2->BRR= 0x0682; // 16 MHz / 9600 â‰ˆ 1667 decimal = 0x0683 hex (close enough)

    // Enable USART and transmitter
    USART2->CR1|= (1 << 13);  // UE: USART enable
    USART2->CR1|= (1 << 3);   // TE: Transmitter enable
}

void ADC_init(void)
{
    // Enable GPIOA clock
    RCC->AHB1ENR|= (1 << 0);

    // Set PA1 to analog mode (11)
  GPIOA->MODER&= ~(0xc);  // REset PA1 pin as analog
  GPIOA->MODER|= (0xc); //Set PA1 as input

    // Enable ADC1 clock
    RCC->APB2ENR|= (1 << 8);

    ADC1->CR2 = 0;          // Reset ADC_CR2
    ADC1->SQR3 = 1;         // Channel 1 (PA1)
    ADC1->CR2|= (1 << 0);  // ADON: ADC enable
    ADC1->CR2|= (1 << 1);  // CONT: Continuous conversion mode
    ADC1->CR2|= (1 << 30); // SWSTART: Start conversion
}

void USART2_SendString(const char *str)
{
    while (*str)
    {
        while (!(USART2->SR & (1 << 7))); // Wait until TXE (transmit data register empty)
        USART2->DR = (*str & 0xFF);
        str++;
    }
}

int main(void)
{
    USART_init();
    ADC_init();

    char buffer[50];
    uint32_t adc_Value;

    while (1)
    {
        while (!(ADC1->SR & (1 << 1)));  // Wait for End of Conversion (EOC)
        adc_Value = ADC1->DR;             // Read ADC value

        sprintf(buffer, "pot value: %lu\r\n", adc_Value);
        USART2_SendString(buffer);
        delay();
    }
}
