#include <stdint.h>

uint32_t *RCC_AHB1ENR  = (uint32_t*)0x40023830;
uint32_t *GPIOA_MODER  = (uint32_t*)0x40020000;
uint32_t *GPIOA_ODR    = (uint32_t*)0x40020014;
uint32_t *GPIOB_MODER  = (uint32_t*)0x40020400;
uint32_t *GPIOB_IDR    = (uint32_t*)0x40020410;
uint32_t *GPIOB_PUPDR  = (uint32_t*)0x4002040c;
void GPIO_init()
{
    // Enable clock for GPIOA and GPIOB
    *RCC_AHB1ENR |= (1 << 0);  // GPIOA
    *RCC_AHB1ENR |= (1 << 1);  // GPIOB

    // Set PB0 and PB1 as input (00)
    *GPIOB_MODER &= ~(1 << 0);
    *GPIOB_MODER &= ~(1 << 1);

    *GPIOB_MODER &= ~(1 << 2);
    *GPIOB_MODER &= ~(1 << 3);

    // Set PA5 as output (01) â€” clear both bits first, then set bit 10
    *GPIOA_MODER &= ~(1 << 13);
    *GPIOA_MODER &= ~(1 << 12);
    *GPIOA_MODER |=  (1 << 12);

    *GPIOB_PUPDR &= ~((3 << 0) | (3 << 2));  // Clear PB0 and PB1 bits
    *GPIOB_PUPDR |= ((1 << 0) | (1 << 2));   // Set pull-up for PB0 and PB1

}

void delay()
{
    for (uint32_t i = 0; i < 30000; i++);
}

int main(void)
{
    GPIO_init();

    while (1)
    {
        if (((*GPIOB_IDR & (1 << 0)))  && ((*GPIOB_IDR & (1 << 1))))
        {
            *GPIOA_ODR |= (1 << 6);
        }
        else if(((*GPIOB_IDR & (1 << 1)) == 0))
        {
            *GPIOA_ODR &= ~(1 << 6);
        }

        else
        {
        	*GPIOA_ODR &= ~(1 << 6);
        }
        delay();
    }
}
